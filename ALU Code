library ieee;
use ieee.std_Logic_1164.all;	--libary for the standard signals
use ieee.numeric_std.all;		--libary for the arithmetic signals
 
entity ALU is
	port( OutputSig	: out signed (7 downto 0));
			 -- Signed means these can be -ve or +ve, unsigned can only be +ve.
	signal AC, SigBus	: signed(7 downto 0);	--input operands
	signal Commands	: unsigned(3 downto 0);	--Operation to be performed
	signal ALUOutput	: signed(7 downto 0)	;	--output of ALU
	
end entity ALU;
 
architecture Behavioral of ALU is
	begin
	process (AC, SigBus, Commands)
		variable Enable : integer := 1;
		begin
		if(Enable = 1) then --Do the calculation at the positive edge of clock cycle.
			case Commands is
				when "0000" => ALUOutput <= AC + SigBus;	--ADD1
				when "0001"	=> ALUOutput <= AC - SigBus; 	--SUB1
				when "0010" => ALUOutput <= AC + 1; 		--INAC1
				when "0011" => ALUOutput <= "00000000";	--CLAC1
				when "0100" => ALUOutput <= AC and SigBus;--AND1
				when "0101" => ALUOutput <= AC or SigBus;	--OR1
				when "0110" => ALUOutput <= 	 not AC;		--NOT1
				when "0111" => ALUOutput <= AC xor SigBus;--XOR1
				when "1000" => ALUOutput <= AC - AC;		--NOP1
				when "1001" => ALUOutput <= AC sll 1;		--RSHT1
				when "1010" => ALUOutput <= AC srl 1;		--LSHT1
				when "1011" => ALUOutput <= SigBus;			--THRU1
				when others => NULL;
			end case;
		end if;
		Enable := 0;
	end process;
end architecture Behavioral;
