1 library ieee; 
2 use ieee.std_logic_1164.all;	--libary for the standard signals 
3 use ieee.numeric_std.all;		--libary for the arithmetic signals 
4   
5 entity ALU is 
6 	port(	-- Signed means these can be -ve or +ve, unsigned can only be +ve. 
7 		Enable		  : in std_logic; 				  --clock signal 
8 		AC, SigBus	: in signed(7 downto 0);  --input operands 
9 		Logic			  : in unsigned(3 downto 0);--Operation to be performed 
10 		ALUOutput	  : out signed(7 downto 0)	--output of ALU 
11 	); 
12 end entity ALU; 
13   
14 architecture Behavior of ALU is 
15 	begin 
16 	process(Enable) 
17 		begin 
18 		if(rising_edge(Enable)) then --Do the calculation at the positive edge of clock cycle. 
19 			case Logic is 
20 				when "0000" => ALUOutput <= AC + SigBus;	--ADD1 
21 				when "0001"	=> ALUOutput <= AC - SigBus; 	--SUB1 
22 				when "0010" => ALUOutput <= AC + 1; 		  --INAC1 
23 				when "0011" => ALUOutput <= "00000000";	  --CLAC1 
24 				when "0100" => ALUOutput <= AC and SigBus;--AND1 
25 				when "0101" => ALUOutput <= AC or SigBus; --OR1 
26 				when "0110" => ALUOutput <= 	 not AC;		--NOT1 
27 				when "0111" => ALUOutput <= AC xor SigBus;--XOR1 
28 				when "1000"	=> ALUOutput <= SigBus;			  --LDAC5 
29 				when "1001"	=> ALUOutput <= SigBus;			  --MOVR1 
30 				when others => NULL; 
31 			end case; 
32 		end if; 
33 	end process; 
34 end architecture Behavior; 
